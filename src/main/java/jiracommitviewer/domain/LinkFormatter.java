package jiracommitviewer.domain;

import java.util.Properties;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.Validate;

/**
 * Stores details on the format for various links that are shown for each commit.
 * <p>
 * These links may be in various formats to accomodate linking to external web systems for revealing file
 * details on the commit. E.g. GitWeb, CGit etc.
 */
public class LinkFormatter {
	
	private static final String PROPERTY_CHANGESET_FORMAT = "changesetFormat";
	private static final String PROPERTY_ADDED_FORMAT = "addedFormat";
	private static final String PROPERTY_MODIFIED_FORMAT = "modifiedFormat";
	private static final String PROPERTY_REPLACED_FORMAT = "replacedFormat";
	private static final String PROPERTY_DELETED_FORMAT = "deletedFormat";
	private static final String PROPERTY_VIEW_FORMAT = "viewFormat";
	
	private String changesetFormat;
	private String fileAddedFormat;
	private String fileModifiedFormat;
	private String fileReplacedFormat;
	private String fileDeletedFormat;
	private String fileViewFormat;

	/**
	 * Gets the format for the changeset as a whole. This is a link for all files within the commit.
	 * 
	 * @return the changeset format. May be {@code null} if no format set
	 */
	public String getChangesetFormat() {
		return changesetFormat;
	}
	
	/**
	 * Sets the changeset format.
	 * 
	 * @param changesetFormat the format to set
	 */
	public void setChangesetFormat(final String changesetFormat) {
		if (StringUtils.isBlank(changesetFormat)) {
			this.changesetFormat = null;
			return;
		}
		this.changesetFormat = changesetFormat;
	}
	
	/**
	 * Gets the format for viewing files that have been added to the repository.
	 * 
	 * @return the added format. May be {@code null} if no format set
	 */
	public String getFileAddedFormat() {
		return fileAddedFormat;
	}
	
	/**
	 * Sets the added format.
	 * 
	 * @param changesetFormat the format to set
	 */
	public void setFileAddedFormat(final String fileAddedFormat) {
		if (StringUtils.isBlank(fileAddedFormat)) {
			this.changesetFormat = null;
			return;
		}
		this.fileAddedFormat = fileAddedFormat;
	}
	
	/**
	 * Gets the format for viewing files that have been deleted from the repository in this commit.
	 * 
	 * @return the deleted format. May be {@code null} if no format set
	 */
	public String getFileDeletedFormat() {
		return fileDeletedFormat;
	}
	
	/**
	 * Sets the deleted format.
	 * 
	 * @param changesetFormat the format to set
	 */
	public void setFileDeletedFormat(final String fileDeletedFormat) {
		if (StringUtils.isBlank(fileDeletedFormat)) {
			this.changesetFormat = null;
			return;
		}
		this.fileDeletedFormat = fileDeletedFormat;
	}
	
	/**
	 * Gets the format for modified files in the repository.
	 * 
	 * @return the modified format. May be {@code null} if no format set
	 */
	public String getFileModifiedFormat() {
		return fileModifiedFormat;
	}
	
	/**
	 * Sets the modified format.
	 * 
	 * @param changesetFormat the format to set
	 */
	public void setFileModifiedFormat(final String fileModifiedFormat) {
		if (StringUtils.isBlank(fileModifiedFormat)) {
			this.changesetFormat = null;
			return;
		}
		this.fileModifiedFormat = fileModifiedFormat;
	}
	
	/**
	 * Gets the format for viewing replaced files (files that were renamed in this commit) in the repository.
	 * 
	 * @return the replaced format. May be {@code null} if no format set
	 */
	public String getFileReplacedFormat() {
		return fileReplacedFormat;
	}
	
	/**
	 * Sets the replaced format.
	 * 
	 * @param changesetFormat the format to set
	 */
	public void setFileReplacedFormat(final String fileReplacedFormat) {
		if (StringUtils.isBlank(fileReplacedFormat)) {
			this.changesetFormat = null;
			return;
		}
		this.fileReplacedFormat = fileReplacedFormat;
	}
	
	/**
	 * Gets the format for viewing files in the repository.
	 * 
	 * @return the view format. May be {@code null} if no format set
	 */
	public String getFileViewFormat() {
		return fileViewFormat;
	}
	
	/**
	 * Sets the view format.
	 * 
	 * @param changesetFormat the format to set
	 */
	public void setFileViewFormat(final String fileViewFormat) {
		if (StringUtils.isBlank(fileViewFormat)) {
			this.changesetFormat = null;
			return;
		}
		this.fileViewFormat = fileViewFormat;
	}
	
	/**
	 * Sets all attributes from the given properties.
	 * <p>
	 * The properties must have been previously generated by calling {@link #saveToProperties()}.
	 * 
	 * @param properties the properties. Must not be {@code null}
	 */
	public void loadFromProperties(final Properties properties) {
		Validate.notNull(properties, "properties must not be null");
		
		setFileAddedFormat(properties.getProperty(PROPERTY_ADDED_FORMAT));
		setChangesetFormat(properties.getProperty(PROPERTY_CHANGESET_FORMAT));
		setFileDeletedFormat(properties.getProperty(PROPERTY_DELETED_FORMAT));
		setFileModifiedFormat(properties.getProperty(PROPERTY_MODIFIED_FORMAT));
		setFileReplacedFormat(properties.getProperty(PROPERTY_REPLACED_FORMAT));
		setFileViewFormat(properties.getProperty(PROPERTY_VIEW_FORMAT));
	}
	
	/**
	 * Saves this link formatter's state to a set of properties.
	 * 
	 * @param properties the properties to save to. Must not be {@code null}
	 */
	public void saveToProperties(final Properties properties) {
		Validate.notNull(properties, "properties must not be null");
		
		properties.put(PROPERTY_ADDED_FORMAT, fileAddedFormat);
		properties.put(PROPERTY_CHANGESET_FORMAT, changesetFormat);
		properties.put(PROPERTY_DELETED_FORMAT, fileDeletedFormat);
		properties.put(PROPERTY_MODIFIED_FORMAT, fileModifiedFormat);
		properties.put(PROPERTY_REPLACED_FORMAT, fileReplacedFormat);
		properties.put(PROPERTY_VIEW_FORMAT, fileViewFormat);
	}
}
