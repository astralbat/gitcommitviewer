package jiracommitviewer.domain;

import java.util.Properties;

import org.apache.commons.lang3.Validate;

/**
 * Represents a code repository.
 * 
 * @author mark
 */
public abstract class AbstractRepository {
	
	protected static final String PROPERTY_DISPLAY_NAME = "displayName";
	protected static final String PROPERTY_ACTIVE = "active";
	protected static final String PROPERTY_LINK_FORMATTER_TYPE = "linkFormatterType";

	private String displayName;
	private LinkFormatter linkFormatter = new LinkFormatter();
	private LinkFormatterType linkFormatterType;
	private final Object id;
	private boolean active;
	
	public AbstractRepository(final Object id) {
		this.id = id;
	}
	
	/**
	 * Gets the identity of this repository.
	 * 
	 * @return the identity. Never {@code null}
	 */
	public Object getId() {
		return id;
	}

	/**
	 * Gets the display name of this repository.
	 * 
	 * @return the display name
	 */
	public String getDisplayName() {
	    return displayName;
	}
	
	/**
	 * Sets the display name of this repository.
	 * 
	 * @param displayName the display name
	 */
	public void setDisplayName(final String displayName) {
		this.displayName = displayName;
	}
	
	/**
	 * Gets whether this repository is active. If there were any recent problems connecting to the remote code repository
	 * then this will be {@code false}.
	 * 
	 * @return true if the repository is active
	 */
	public boolean isActive() {
		return active;
	}
	
	/**
	 * Sets whether the repository is active.
	 * 
	 * @param active true if the repository is active
	 */
	public void setActive(final boolean active) {
		this.active = active;
	}
	
	/**
	 * Gets the formatter used to hold link templates for revealing details of the commit
	 * in third party web systems.
	 * 
	 * @return the link formatter. Never {@code null}
	 */
	public LinkFormatter getLinkFormatter() {
		return linkFormatter;
	}
	
	/**
	 * Gets the link formatter type that was initially chosen if the link formatter values were
	 * derived from a template. E.g. GitWeb.
	 * 
	 * @return the formatter type or {@code null} if none associated
	 */
	public LinkFormatterType getLinkFormatterType() {
		return linkFormatterType;
	}
	
	/**
	 * Sets the link formatter type that was initially chosen if the link formatter values were
	 * derived from a template. E.g. GitWeb.
	 * 
	 * @param linkFormatterType the formatter type or {@code null} if none associated
	 */
	public void setLinkFormatterType(final LinkFormatterType linkFormatterType) {
		this.linkFormatterType = linkFormatterType;
	}
	
	/**
	 * Sets all attributes except id of this repository from the given properties.
	 * <p>
	 * The properties must have been previously generated by calling {@link #saveToProperties()}.
	 * 
	 * @param properties the properties. Must not be {@code null}
	 */
	public void loadFromProperties(final Properties properties) {
		Validate.notNull(properties, "properties must not be null");
		
		this.displayName = properties.getProperty(PROPERTY_DISPLAY_NAME);
		this.active = Boolean.valueOf(properties.getProperty(PROPERTY_ACTIVE));
		this.linkFormatterType = LinkFormatterType.valueOf(properties.getProperty(PROPERTY_LINK_FORMATTER_TYPE));
		linkFormatter.loadFromProperties(properties);
	}
	
	/**
	 * Saves this repository's state to a set of properties.
	 * 
	 * @param properties the properties to save to. Must not be {@code null}
	 * @return the properties. Never {@code null}
	 */
	public void saveToProperties(final Properties properties) {
		properties.put(PROPERTY_DISPLAY_NAME, getDisplayName());
		properties.put(PROPERTY_ACTIVE, String.valueOf(isActive()));
		properties.put(PROPERTY_LINK_FORMATTER_TYPE, getLinkFormatterType().name());
		linkFormatter.saveToProperties(properties);
	}
}
